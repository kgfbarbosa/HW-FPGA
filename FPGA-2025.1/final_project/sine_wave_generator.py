# -*- coding: utf-8 -*-
"""sine_wave_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ugwM-j5tFx6nYotHuswGEU1NPAU7SA4s
"""

# sine_generator -> wave creation
# author: Klysmann G.F. Barbosa
# date: 6/11/2025
# lab: GPAR

import math

M = 0.8
num_points = 3072 # 24 * 128
dac_center = 127.5
sine_amplitude_dac = M * dac_center

lut_values = []
for i in range(num_points):
    angle = (2 * math.pi * i) / num_points
    # Formula: round(offset + amplitude * sin(angle))
    value = round(dac_center + sine_amplitude_dac * math.sin(angle))

    # Garantir que os valores estejam dentro do range [0, 255]
    if value < 0:
        value = 0
    elif value > 255:
        value = 255

    lut_values.append(int(value))

# Imprimir os valores no formato VHDL
vhdl_lut = "CONSTANT data1 : table1 (0 TO {}) := (\n".format(num_points - 1)
for i, val in enumerate(lut_values):
    vhdl_lut += str(val)
    if i < num_points - 1:
        vhdl_lut += ","
    if (i + 1) % 20 == 0: # 20 valores por linha para legibilidade
        vhdl_lut += "\n"
vhdl_lut += "\n);"
print(vhdl_lut)

# Para verificar os limites:
print(f"\nValor Mínimo na LUT: {min(lut_values)}")
print(f"Valor Máximo na LUT: {max(lut_values)}")